// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnknownError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_UNKNOWN_ERROR.String() && e.Code == 500
}

func ErrorUnknownError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_UNKNOWN_ERROR.String(), fmt.Sprintf(format, args...))
}

//  Get_Account_Failed = 1 [(errors.code) = 401];
func IsValidateError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_VALIDATE_ERROR.String() && e.Code == 500
}

//  Get_Account_Failed = 1 [(errors.code) = 401];
func ErrorValidateError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_VALIDATE_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsAccountExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_ACCOUNT_EXIST.String() && e.Code == 500
}

func ErrorAccountExist(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_ACCOUNT_EXIST.String(), fmt.Sprintf(format, args...))
}

func IsAccountIllegal(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_ACCOUNT_ILLEGAL.String() && e.Code == 500
}

func ErrorAccountIllegal(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_ACCOUNT_ILLEGAL.String(), fmt.Sprintf(format, args...))
}

func IsUserRegisterFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_REGISTER_FAILED.String() && e.Code == 500
}

func ErrorUserRegisterFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_USER_REGISTER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUserLoginFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_LOGIN_FAILED.String() && e.Code == 500
}

func ErrorUserLoginFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_USER_LOGIN_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUserSearchFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_SEARCH_FAILED.String() && e.Code == 500
}

func ErrorUserSearchFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_USER_SEARCH_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUserDeleteFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_DELETE_FAILED.String() && e.Code == 500
}

func ErrorUserDeleteFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_USER_DELETE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsPermissionDeny(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_PERMISSION_DENY.String() && e.Code == 500
}

func ErrorPermissionDeny(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_PERMISSION_DENY.String(), fmt.Sprintf(format, args...))
}

func IsLoginStateTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_LOGIN_STATE_TIMEOUT.String() && e.Code == 500
}

func ErrorLoginStateTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_LOGIN_STATE_TIMEOUT.String(), fmt.Sprintf(format, args...))
}

func IsUserLogoutFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_LOGOUT_FAILED.String() && e.Code == 500
}

func ErrorUserLogoutFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_USER_LOGOUT_FAILED.String(), fmt.Sprintf(format, args...))
}
